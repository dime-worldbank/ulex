[{"path":"https://dime-worldbank.github.io/ulex/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robert Marty. Author, maintainer.","code":""},{"path":"https://dime-worldbank.github.io/ulex/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Marty R (2024). ulex: Unique Location Extractor. R package version 0.1.0, https://dime-worldbank.github.io/ulex/.","code":"@Manual{,   title = {ulex: Unique Location Extractor},   author = {Robert Marty},   year = {2024},   note = {R package version 0.1.0},   url = {https://dime-worldbank.github.io/ulex/}, }"},{"path":"https://dime-worldbank.github.io/ulex/index.html","id":"unique-location-extractor-ulex-","dir":"","previous_headings":"","what":"Unique Location Extractor","title":"Unique Location Extractor","text":"Overview Installation Functions Quick start Additional information functions","code":""},{"path":"https://dime-worldbank.github.io/ulex/index.html","id":"overview-","dir":"","previous_headings":"","what":"Overview","title":"Unique Location Extractor","text":"Text often contains references locations events want extract location event. example, consider example tweet reports road traffic crash Nairobi, Kenya, interested determining location crash: crash occurred near garden city thika road way towards roysambu. tweet contains three location references: (1) garden city, (2) Thika road (3) roysambu, ‘garden city’ name multiple locations. , interested extracting location garden city location Thika road represents crash site. Unique Location Extractor (ULEx) geoparses text extract unique location events. algorithm first determines location references refer event interest location references ignored. algorithm determines location event checking text dictionaries landmarks, roads, areas (neighborhoods). Moreover, algorithm accounts differences spelling user writes location location captured dictionary locations; users may use short, informal names location dictionary may contain formal names. example, user may write “crash near mathare center”, landmark dictionary contains “mathare social justice centre”. package originally developed extract locations road traffic crashes reports crashes via Twitter, specifically context Nairobi, Kenya using Twitter feed @Ma3Route. information, see article : Milusheva S, Marty R, Bedoya G, Williams S, Resor E, Legovini (2021) Applying machine learning geolocation techniques social media data (Twitter) develop resource urban planning. PLoS ONE 16(2): e0244317. https://doi.org/10.1371/journal.pone.0244317","code":""},{"path":"https://dime-worldbank.github.io/ulex/index.html","id":"installation-","dir":"","previous_headings":"","what":"Installation","title":"Unique Location Extractor","text":"can install development version ulex GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"dime-worldbank/ulex\")"},{"path":"https://dime-worldbank.github.io/ulex/index.html","id":"functions-","dir":"","previous_headings":"","what":"Functions","title":"Unique Location Extractor","text":"package contains two functions: augment_gazetteer: backbone locating events looking location references gazetteer, geographic dictionary. augment_gazetteer facilitates cleaning gazetteer may constructed sources OpenStreetMaps, Geonames Google Maps. information function, see . locate_event: Takes text input returns location relevant event. Key inputs include text geoparse, gazetteer landmarks, spatial files roads areas (e.g., neighborhoods) list event words. information function, see .","code":""},{"path":"https://dime-worldbank.github.io/ulex/index.html","id":"quick-start-","dir":"","previous_headings":"","what":"Quick Start","title":"Unique Location Extractor","text":"Setup Dataset Wards Dataset roads Dataset landmarks (landmark gazetteer) Augment gazetteer Location events","code":""},{"path":"https://dime-worldbank.github.io/ulex/index.html","id":"setup-","dir":"","previous_headings":"Quick Start","what":"Setup","title":"Unique Location Extractor","text":"","code":"# Load ULEx library(ulex)  ## Load other packages, such as those for creating location dictionaries library(dplyr) library(geodata) library(osmdata) library(basemaps) library(sf) library(ggplot2) library(stringr)"},{"path":[]},{"path":"https://dime-worldbank.github.io/ulex/index.html","id":"dataset-of-wards-","dir":"","previous_headings":"Quick Start > Create location datasets","what":"Dataset of Wards","title":"Unique Location Extractor","text":"create dataset Wards Nairobi GADM.","code":"ken_sf <- gadm(country = \"KEN\", level = 3, path = tempdir()) %>% st_as_sf() nbo_sf <- ken_sf %>%   filter(NAME_1 %in% \"Nairobi\") %>%   rename(name = NAME_3) %>%   dplyr::select(name)  head(nbo_sf) #> Simple feature collection with 6 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 36.67803 ymin: -1.302667 xmax: 36.81967 ymax: -1.256238 #> Geodetic CRS:  WGS 84 #>         name                       geometry #> 1     Gatina POLYGON ((36.7601 -1.268443... #> 2 Kileleshwa POLYGON ((36.81139 -1.27213... #> 3   Kilimani POLYGON ((36.75393 -1.28606... #> 4     Kabiro POLYGON ((36.7373 -1.275437... #> 5 Kawangware POLYGON ((36.74915 -1.27165... #> 6   Mutu-Ini POLYGON ((36.67803 -1.29837..."},{"path":"https://dime-worldbank.github.io/ulex/index.html","id":"dataset-of-roads-","dir":"","previous_headings":"Quick Start > Create location datasets","what":"Dataset of roads","title":"Unique Location Extractor","text":"create dataset roads OpenStreetMaps.","code":"roads_sf <- opq(st_bbox(nbo_sf), timeout = 999) %>%   add_osm_feature(key = \"highway\", value = c(\"motorway\",                                              \"trunk\",                                              \"primary\",                                              \"secondary\",                                              \"tertiary\",                                              \"unclassified\")) %>%   osmdata_sf() roads_sf <- roads_sf$osm_lines  roads_sf <- roads_sf %>%   filter(!is.na(name)) %>%   dplyr::select(name) %>%   mutate(name = name %>% tolower())  head(roads_sf) #> Simple feature collection with 6 features and 1 field #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: 36.80283 ymin: -1.348233 xmax: 36.91442 ymax: -1.286476 #> Geodetic CRS:  WGS 84 #>                              name                       geometry #> 4685092        airport south road LINESTRING (36.91442 -1.344... #> 4716860        state house avenue LINESTRING (36.80434 -1.286... #> 4716861          processional way LINESTRING (36.81367 -1.287... #> 4716862           kenyatta avenue LINESTRING (36.81026 -1.289... #> 4716887           kenyatta avenue LINESTRING (36.81188 -1.289... #> 4723375 city mortuary round about LINESTRING (36.80306 -1.298..."},{"path":"https://dime-worldbank.github.io/ulex/index.html","id":"dataset-of-landmarks-landmark-gazetteer-","dir":"","previous_headings":"Quick Start > Create location datasets","what":"Dataset of landmarks (landmark gazetteer)","title":"Unique Location Extractor","text":"create gazetteer landmarks OpenStreetMaps. OpenStreetMaps, use amenities bus stops.","code":"# Amenities -------------------------------------------------------------------- amenities_sf <- opq(st_bbox(nbo_sf), timeout = 999) %>%   add_osm_feature(key = \"amenity\") %>%   osmdata_sf()  amenities_pnt_sf <- amenities_sf$osm_points amenities_ply_sf <- amenities_sf$osm_polygons %>%   st_centroid()  amenities_sf <- bind_rows(amenities_pnt_sf,                           amenities_ply_sf) %>%   dplyr::mutate(type = amenity)  # Bus Stops -------------------------------------------------------------------- busstops_sf <- opq(st_bbox(nbo_sf), timeout = 999) %>%   add_osm_feature(key = \"highway\",                   value = \"bus_stop\") %>%   osmdata_sf()  busstops_sf <- busstops_sf$osm_points  busstops_sf <- busstops_sf %>%   mutate(type = \"bus_stop\")  # Append ----------------------------------------------------------------------- landmarks_sf <- bind_rows(amenities_sf,                           busstops_sf) %>%   filter(!is.na(name)) %>%   dplyr::select(name, type) %>%   mutate(name = name %>% tolower())  head(landmarks_sf) #> Simple feature collection with 6 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 36.70606 ymin: -1.325597 xmax: 36.80624 ymax: -1.292358 #> Geodetic CRS:  WGS 84 #>                                        name             type #> 30031187 regina caeli karen catholic church place_of_worship #> 30088423                        china plate       restaurant #> 30088443                              rubis             fuel #> 30088444                      shell kabuagi             fuel #> 30088453               karen police station           police #> 30092033                              total             fuel #>                            geometry #> 30031187  POINT (36.7107 -1.325597) #> 30088423 POINT (36.80624 -1.292358) #> 30088443 POINT (36.71747 -1.317521) #> 30088444 POINT (36.71842 -1.316594) #> 30088453 POINT (36.70606 -1.321773) #> 30092033 POINT (36.78867 -1.299975)"},{"path":"https://dime-worldbank.github.io/ulex/index.html","id":"map-landmark-road-and-area-dictionaries","dir":"","previous_headings":"Quick Start > Create location datasets","what":"Map landmark, road, and area dictionaries","title":"Unique Location Extractor","text":"map shows locations landmark, roads, area dictionaries.","code":"ggplot() +   geom_sf(data = roads_sf,           aes(color = \"Roads\"),           linewidth = 0.6) +   geom_sf(data = landmarks_sf,           aes(color = \"Landmarks\"),           size = 0.1,           alpha = 0.5) +   geom_sf(data = nbo_sf,           fill = \"gray\",           aes(color = \"Wards\"),           linewidth = 0.5,           alpha = 0.2) +   labs(color = NULL,        title = \"Landmarks, Roads, and Wards\") +   scale_color_manual(values = c(\"blue\", \"chartreuse3\", \"black\")) +   theme_void() +   theme(plot.title = element_text(face = \"bold\"))"},{"path":"https://dime-worldbank.github.io/ulex/index.html","id":"augment-gazetteer-","dir":"","previous_headings":"Quick Start","what":"Augment Gazetteer","title":"Unique Location Extractor","text":", augment landmark gazetteer—increases number entries 11,000 50,000.","code":"landmarks_aug_sf <- augment_gazetteer(landmarks_sf)  print(nrow(landmarks_sf)) #> [1] 11164 print(nrow(landmarks_aug_sf)) #> [1] 50022  head(landmarks_aug_sf) #> Simple feature collection with 6 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 36.70606 ymin: -1.325597 xmax: 36.80624 ymax: -1.292358 #> Geodetic CRS:  WGS 84 #>                                        name              type #> 30031187 regina caeli karen catholic church  place_of_worship #> 30088423                        china plate        restaurant #> 30088443                              rubis              fuel #> 30088444                      shell kabuagi              fuel #> 30088453               karen police station            police #> 30092079   nairobi international trade fair exhibition_centre #>                               name_original                   geometry #> 30031187 regina caeli karen catholic church  POINT (36.7107 -1.325597) #> 30088423                        china plate POINT (36.80624 -1.292358) #> 30088443                              rubis POINT (36.71747 -1.317521) #> 30088444                      shell kabuagi POINT (36.71842 -1.316594) #> 30088453               karen police station POINT (36.70606 -1.321773) #> 30092079   nairobi international trade fair POINT (36.76114 -1.307832)"},{"path":"https://dime-worldbank.github.io/ulex/index.html","id":"locate-events-","dir":"","previous_headings":"Quick Start","what":"Locate Events","title":"Unique Location Extractor","text":"geolocate location crashes contained five texts.  output locate_event() following variables: text: Original text geocode. matched_words_correct_spelling: Names locations used geocode event, names appear landmark, roads, area datasets matched_words_text_spelling: Names locations used geocode event, names appear text. dist_closest_event_word: Distance landmark event word (ie, number words event word location word). type: Type location (e.g., landmark, intersection). how_determined_location: Information location determined. dist_mentioned_road_m: Distance (meters) event location mentioned road. lon_all: landmark locations found text (longitude). lat_all: landmark locations found text (latitude). landmarks_all_text_spelling: Names landmarks found, names appear text. landmarks_all_correct_spelling: Names landmarks found, names appear landmark gazetteer. landmarks_all_location: Names landmarks locations (name,latitude,longitude). roads_all_text_spelling: Names roads text, names appear text. roads_all_correct_spelling: Name roads text, names appear road dataset. intersection_all_text_spelling: Name intersection (e.g., pairs roads make intersection), names appear text. intersection_all_correct_spelling: Name intersection (e.g., pairs roads make intersection), names appear road dataset. intersection_all_location: Name locations intersections (name,latitude,longitude). geometry: Geometry event location.","code":"texts <- c(\"crash at garden city\",             \"crash occurred near garden city on thika road towards roysambu\",             \"crash at intersection of juja road and outer ring rd\",             \"crash occured near roysambu on thika rd\",             \"crash near mathare centre along juja road\")  crashes_sf <- locate_event(text = texts,                            landmark_gazetteer = landmarks_aug_sf,                            areas = nbo_sf,                            roads = roads_sf,                            event_words = c(\"accident\", \"crash\", \"collision\",                                             \"wreck\", \"overturn\")) ext <- crashes_sf %>%   st_buffer(dist = 500) %>%   st_bbox()  ggplot() +   geom_sf() +   basemap_gglayer(ext) +   geom_sf(data = crashes_sf %>%             st_transform(3857),           pch = 21,           color = \"black\",           fill = \"red\") +   scale_fill_identity() +    theme_void() #> Loading basemap 'voyager' from map service 'carto'... #> Using geom_raster() with maxpixels = 272936. head(crashes_sf) #> Simple feature collection with 5 features and 17 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 36.86339 ymin: -1.263214 xmax: 36.89176 ymax: -1.218554 #> Geodetic CRS:  WGS 84 #>                                                             text #> 1                                           crash at garden city #> 2 crash occurred near garden city on thika road towards roysambu #> 3           crash at intersection of juja road and outer ring rd #> 4                        crash occured near roysambu on thika rd #> 5                      crash near mathare centre along juja road #>   matched_words_correct_spelling matched_words_text_spelling #> 1                    garden city                 garden city #> 2                    garden city                 garden city #> 3        juja road,outer ring rd     juja road,outer ring rd #> 4                       roysambu                    roysambu #> 5                 mathare centre              mathare centre #>   dist_closest_event_word         type #> 1                       2     landmark #> 2                       3     landmark #> 3                    <NA> intersection #> 4                       3     landmark #> 5                       2     landmark #>                                                                                             how_determined_location #> 1                                                        crashword_tier_crashword_prepos_tier_1preposition_landmark #> 2 crashword_tier_crashword_other_prepos_tier_2preposition_landmark;restrict_landmarks_close_to_road;snapped_to_road #> 3                                                                                                 intersection_word #> 4                                                  crashword_tier_crashword_other_prepos_tier_2preposition_landmark #> 5       crashword_tier_crashword_prepos_tier_2preposition_landmark;restrict_landmarks_close_to_road;snapped_to_road #>   dist_mentioned_road_m #> 1                    NA #> 2             0.1138995 #> 3             9.3633326 #> 4                    NA #> 5             5.1565383 #>                                                                                                             lon_all #> 1 36.8783717;36.8780867;36.8787449;36.8783882;36.877926;36.8779701;36.8790582;36.8788693;36.8784728;36.878982133789 #> 2                                                            36.8776376;36.8780562;36.8773468;36.8774006;36.8784865 #> 3                                                                                                  36.8787944172118 #> 4                                                             36.8914926;36.8910567;36.8909309;36.8925596;36.892742 #> 5                                                            36.8657684;36.8643478;36.8637369;36.8599741;36.8631133 #>                                                                                                    lat_all #> 1 -1.2325403;-1.2320662;-1.232074;-1.2330105;-1.2323486;-1.2322988;-1.2329316;-1.2332295;-1.23139664524347 #> 2                                                       -1.2314164;-1.231087;-1.23165;-1.231608;-1.2307509 #> 3                                                                                        -1.26230037028693 #> 4                                                   -1.2175606;-1.2204266;-1.2179853;-1.2182267;-1.2185699 #> 5                                                    -1.2625076;-1.262893;-1.2630666;-1.2643594;-1.2632442 #>   landmarks_all_text_spelling landmarks_all_correct_spelling #> 1                 garden city                    garden city #> 2        garden city;roysambu           garden city;roysambu #> 3                        <NA>                           <NA> #> 4                    roysambu                       roysambu #> 5              mathare centre                 mathare centrelandmarks_all_location #> 1                                                                                                                                                                                garden city,-1.2330105,36.8783882;garden city,-1.2323486,36.8779701;garden city,-1.232074,36.877926;garden city,-1.2322988,36.8790582;garden city,-1.2320662,36.8780867;garden city,-1.232074,36.8787449;garden city,-1.2329316,36.8788693;garden city,-1.2332295,36.8784728;garden city,-1.23139664524347,36.878982133789;garden city,-1.2325403,36.8783717 #> 2                      roysambu,-1.2182267,36.8925596;roysambu,-1.2185699,36.892742;roysambu,-1.2179853,36.8909309;roysambu,-1.2204266,36.8910567;garden city,-1.2330105,36.8783882;roysambu,-1.2175606,36.8914926;garden city,-1.2323486,36.8779701;garden city,-1.232074,36.877926;garden city,-1.2322988,36.8790582;garden city,-1.2320662,36.8780867;garden city,-1.232074,36.8787449;garden city,-1.2329316,36.8788693;garden city,-1.2332295,36.8784728;garden city,-1.23139664524347,36.878982133789;garden city,-1.2325403,36.8783717 #> 3                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <NA> #> 4                                                                                                                                                                                                                                                                                                                                                                                   roysambu,-1.2182267,36.8925596;roysambu,-1.2185699,36.892742;roysambu,-1.2179853,36.8909309;roysambu,-1.2204266,36.8910567;roysambu,-1.2175606,36.8914926 #> 5 mathare centre,-1.2611937,36.8653216;mathare centre,-1.2617117,36.8577317;mathare centre,-1.2638293,36.845051;mathare centre,-1.2611119,36.8638678;mathare centre,-1.2618483,36.8656506;mathare centre,-1.26414643275423,36.8546990206489;mathare centre,-1.2614051,36.862644;mathare centre,-1.262266,36.8501481;mathare centre,-1.2624083,36.8501916;mathare centre,-1.249874,36.876873;mathare centre,-1.2617267,36.86359;mathare centre,-1.2615767,36.8638023;mathare centre,-1.2639967,36.8450983;mathare centre,-1.2617323,36.8634252 #>   roads_all_text_spelling roads_all_correct_spelling #> 1                    <NA>                       <NA> #> 2              thika road                 thika road #> 3 juja road;outer ring rd    juja road;outer ring rd #> 4                    <NA>                       <NA> #> 5               juja road                  juja road #>   intersection_all_text_spelling intersection_all_correct_spelling #> 1                           <NA>                              <NA> #> 2                           <NA>                              <NA> #> 3        juja road,outer ring rd           juja road,outer ring rd #> 4                           <NA>                              <NA> #> 5                           <NA>                              <NA> #>                                    intersection_all_location #> 1                                                       <NA> #> 2                                                       <NA> #> 3 juja road,outer ring rd,-1.26230037028693,36.8787944172118 #> 4                                                       <NA> #> 5                                                       <NA> #>                     geometry #> 1 POINT (36.87849 -1.232397) #> 2 POINT (36.87779 -1.231302) #> 3   POINT (36.87879 -1.2623) #> 4 POINT (36.89176 -1.218554) #> 5 POINT (36.86339 -1.263214)"},{"path":[]},{"path":"https://dime-worldbank.github.io/ulex/index.html","id":"augment_gazetteer-","dir":"","previous_headings":"Additional information on functions","what":"augment_gazetteer()","title":"Unique Location Extractor","text":"augment_gazetteer function adds additional landmarks account different ways saying landmark name. example, raw gazetteers may contain long, formal names, shorter versions name often used. addition, function facilitates removing landmarks names spurious may confuse algorithm; include landmark names common words may used different contexts, frequent generic landmarks hotel. Key components function include: Adding additional landmarks based n-grams skip-grams landmark names. example, original landmark garden city mall, following landmarks added: garden city, city mall, garden mall. Adding landmarks according set rules: example, landmark starts ends certain word, alternative version landmark added removes word. , words along categories landmarks removed, user may reference category; example, user likely say McDonalds McDonalds restaurant. Removes landmarks refer large geographic areas (e.g., roads). Roads areas dealt separately; function focuses cleaning gazetteer specific points/landmarks. Pages S4 S6 supplementary information file provides details augment gazetteer algorithm","code":""},{"path":"https://dime-worldbank.github.io/ulex/index.html","id":"locate_event-","dir":"","previous_headings":"Additional information on functions","what":"locate_event()","title":"Unique Location Extractor","text":"locate_event function extracts landmarks text determines unique location events text. algorithm works two steps: (1) finding locations text (2) determining unique location. Finding location references text extract location references text, function implements following steps extract location references text. Determines whether text matches names gazetteer. exact ‘fuzzy’ matches (allowing certain Levenstein distance) used. Rely words prepositions find locations. algorithm starts word preposition extracts landmarks contain word. , algorithm takes next word text subsets landmarks. process repeated adding word removes landmarks. road area (eg, neighborhood) found previous step, landmarks near road neighborhood considered. Landmarks shortest number words kept (.e., process finds 5 landmarks 2 words 7 landmarks 3 words, 5 landmarks 2 words kept). road area mentioned landmark near road landmark, longer versions landmark near road area searched . example, user says crash near garden thika road, algorithm may extract multiple landmarks name garden, none near Thika road. search landmarks contain garden (e.g., garden city mall) near Thika road. two roads mentioned, algorithm extracts intersection roads. Determine unique location extracting landmarks, algorithm seeks identify single location using series steps. steps consider defined list event words (eg, road traffic crashes, include ‘crash’, ‘accident’, ‘overturn’, etc), whether user mentions junction word (e.g., ‘junction’ ‘intersection’) list prepositions. Certain prepositions given precedent others distinguish locations indicating location event versus locations away provide additional context; example, takes higher precedence towards. following main series steps used following order: Locations follow pattern [event word] [preposition] [location] extracted. Locations follow pattern [preposition] [location] extracted. multiple occurrences, location near higher order preposition used. tie, location closest event word used. junction word used, two roads mentioned, two roads intersect , intersection point used. location closest event word within text used. location name multiple locations, (1) restrict locations near mentioned road area, (2) check dominant cluster locations (3) prioritize certain landmark types others (e.g., user likely reference large, well known location type like stadium). landmark found, road area found, road area returned. road area mentioned, intersection road area returned. Pages S15 S19 supplementary information file provides details locate event algorithm","code":""},{"path":"https://dime-worldbank.github.io/ulex/reference/augment_gazetteer.html","id":null,"dir":"Reference","previous_headings":"","what":"Augments Landmark Gazetteer — augment_gazetteer","title":"Augments Landmark Gazetteer — augment_gazetteer","text":"Augments Landmark Gazetteer","code":""},{"path":"https://dime-worldbank.github.io/ulex/reference/augment_gazetteer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augments Landmark Gazetteer — augment_gazetteer","text":"","code":"augment_gazetteer(   landmarks,   landmarks.name_var = \"name\",   landmarks.type_var = \"type\",   grams.min_words = 3,   grams.max_words = 6,   grams.skip_gram_first_last_word_match = TRUE,   grams.add_only_if_name_new = FALSE,   grams.add_only_if_specific = FALSE,   types_rm = c(\"route\", \"road\", \"toilet\", \"political\", \"locality\", \"neighborhood\",     \"area\", \"section of populated place\"),   types_rm.except_with_type = c(\"flyover\", \"round about\", \"roundabout\"),   types_rm.except_with_name = c(\"flyover\", \"round about\", \"roundabout\"),   parallel.sep_slash = TRUE,   parallel.rm_begin = c(tm::stopwords(\"en\"), c(\"near\", \"at\", \"the\", \"towards\", \"near\")),   parallel.rm_end = c(\"bar\", \"shops\", \"restaurant\", \"sports bar\", \"hotel\", \"bus station\"),   parallel.word_diff = \"default\",   parallel.word_diff_iftype = list(list(words = c(\"stage\", \"bus stop\", \"bus station\"),     type = \"transit_station\")),   parallel.rm_begin_iftype = NULL,   parallel.rm_end_iftype = list(list(words = c(\"stage\", \"bus stop\", \"bus station\"), type     = \"transit_station\")),   parallel.word_begin_addtype = NULL,   parallel.word_end_addtype = list(list(words = c(\"stage\", \"bus stop\", \"bus station\"),     type = \"stage\")),   parallel.add_only_if_name_new = FALSE,   parallel.add_only_if_specific = FALSE,   rm.contains = c(\"road\", \"rd\"),   rm.name_begin = c(tm::stopwords(\"en\"), c(\"near\", \"at\", \"the\", \"towards\", \"near\")),   rm.name_end = c(\"highway\", \"road\", \"rd\", \"way\", \"ave\", \"avenue\", \"street\", \"st\"),   pos_rm.all = c(\"ADJ\", \"ADP\", \"ADV\", \"AUX\", \"CCONJ\", \"INTJ\", \"NUM\", \"PRON\", \"SCONJ\",     \"VERB\", \"X\"),   pos_rm.except_type = list(pos = c(\"NOUN\", \"PROPN\"), type = c(\"bus\", \"restaurant\",     \"bank\"), name = \"\"),   close_thresh_km = 1,   quiet = TRUE )"},{"path":"https://dime-worldbank.github.io/ulex/reference/augment_gazetteer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augments Landmark Gazetteer — augment_gazetteer","text":"landmarks sf spatial points data.frame landmarks. landmarks.name_var Name variable indicating name landmark. (Default: \"name\"). landmarks.type_var Name variable indicating type landmark. (Default: \"type\"). grams.min_words Minimum number words name make n/skip-grams name. (Default: 3). grams.max_words Maximum number words name make n/skip-grams name. Setting cap helps reduce spurious landmarks may come really long names. (Default: 6). grams.skip_gram_first_last_word_match skip-grams, first last word original word? (Default: TRUE). grams.add_only_if_name_new creating new landmarks based n- skip-grams, add additional landmark name landmark new; .e., name already exist gazetteer. (Default: FALSE). grams.add_only_if_specific creating new landmarks based n- skip-grams, add additional landmark name landmark represents specific location. specific location location landmark entries name close together (within close_thresh_km kilometers). (Default: FALSE). types_rm landmark one types, remove - unless types_rm.except_with_type types_rm.except_with_name prevents removing. (Default: c(\"route\", \"road\", \"toilet\", \"political\", \"locality\", \"neighborhood\", \"area\", \"section populated place\")). types_rm.except_with_type Landmark types always keep. parameter becomes relevant cases landmark one type. landmark \"types_rm\" \"types_always_keep\" landmark, landmark kept. (Default: c(\"flyover\", \"round \", \"roundabout\")). types_rm.except_with_name Landmark names always keep. parameter becomes relevant cases landmark one \"types_rm\" , keep landmark \"names_always_keep\" somewhere name. example, landmark road flyover name, may want keep landmark flyovers small spatial areas. (Default: c(\"flyover\", \"round \", \"roundabout\")). parallel.sep_slash landmark contains slash, create new landmarks slash. (Default: TRUE). parallel.rm_begin landmark name begins one words, add landmark excludes word. (Default: c(tm::stopwords(\"en\"), c(\"near\",\"\",\"\", \"towards\", \"near\"))). parallel.rm_end landmark name ends one words, add landmark excludes word. (Default: c(\"bar\", \"shops\", \"restaurant\",\"sports bar\",\"hotel\", \"bus station\")). parallel.word_diff landmark includes one words, add landmark swaps word word (e.g., \"center\" \"centre\"). default, uses set collection words. Users can also manually specify different word versions. Input data.frame following variables: version_1 (one spelling word) version_2 (second spelling word). parallel.word_diff_iftype landmark includes one words, add landmark swaps word word (e.g., \"bus stop\" \"bus station\"). Enter named list words, words = c() type = c(). (Default: list(list(words = c(\"stage\", \"bus stop\",  \"bus station\"), type = \"transit_station\"))). parallel.rm_begin_iftype landmark name begins one words, add landmark excludes word landmark certain type. (Default: NULL). parallel.rm_end_iftype landmark name ends one words, add landmark excludes word landmark certain type. (Default: list(list(words = c(\"stage\", \"bus stop\",  \"bus station\"), type = \"transit_station\"))). parallel.word_begin_addtype landmark begins one words, add type. example, landmark \"restaurant\", indicates landmark restaurant. Adding \"restaurant\" landmark ensures type reflected. (Default: NULL). parallel.word_end_addtype landmark ends one words, add type. example, landmark \"X stage\", indicates landmark bus stage. Adding \"stage\" landmark ensures type reflected. (Default: list(list(words = c(\"stage\", \"bus stop\", \"bus station\"), type = \"stage\"))). parallel.add_only_if_name_new creating parallel landmarks using parameters, add additional landmark name landmark new; .e., name already exist gazetteer. (Default: FALSE). parallel.add_only_if_specific creating parallel landmarks using parameters, add additional landmark name landmark represents specific location. specific location location landmark entries name close together (within close_thresh_km kilometers). (Default: FALSE). rm.contains Remove landmark contains one words. Implemented N/skip-grams parallel landmarks added. (Default: c(\"road\", \"rd\")). rm.name_begin Remove landmark begins one words. Implemented N/skip-grams parallel landmarks added. (Default: c(tm::stopwords(\"en\"), c(\"near\",\"\",\"\", \"towards\", \"near\"))). rm.name_end Remove landmark ends one words. Implemented N/skip-grams parallel landmarks added. (Default: c(\"highway\", \"road\", \"rd\", \"way\", \"ave\", \"avenue\", \"street\", \"st\")). pos_rm.Part--speech categories remove. Part--speech determined Spacy. (Default: c(\"ADJ\", \"ADP\", \"ADV\", \"AUX\", \"CCONJ\", \"INTJ\", \"NUM\", \"PRON\", \"SCONJ\", \"VERB\", \"X\")). pos_rm.except_type specify part--speech categories remove pos_rm., override pos_rm.keep word. Names list : (1) pos (word also another type part--speech); (2) type (word also certain type place); (3) name (word includes certain text). Example: list(pos = c(\"NOUN\", \"PROPN\"), type = c(\"bus\", \"restaurant\", \"bank\"), name = c(\"parliament\")). (Default: list(pos = c(\"NOUN\", \"PROPN\"), type = c(\"bus\", \"restaurant\", \"bank\"), name = \"\")). close_thresh_km consider locations close together. Used determining landmark name multiple locations specific (close together) general (far apart). (Default: 1). quiet Print progress function. (Default: TRUE).","code":""},{"path":"https://dime-worldbank.github.io/ulex/reference/augment_gazetteer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augments Landmark Gazetteer — augment_gazetteer","text":"sf spatial point data.frame landmarks.","code":""},{"path":"https://dime-worldbank.github.io/ulex/reference/augment_gazetteer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augments Landmark Gazetteer — augment_gazetteer","text":"","code":"library(ulex)  lm_sf <- data.frame(name = c(\"white house\",                              \"the world bank group\",                              \"the george washington university\"),                     lat = c(38.897778,                             38.89935,                             38.9007),                     lon = c(-77.036389,                             -77.04275,                             -77.0508),                     type = c(\"building\", \"building\", \"building\")) |> sf::st_as_sf(coords = c(\"lon\", \"lat\"),          crs = 4326)  lm_aug_sf <- augment_gazetteer(lm_sf) #> successfully initialized (spaCy Version: 3.7.2, language model: en_core_web_sm)"},{"path":"https://dime-worldbank.github.io/ulex/reference/locate_event.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate Event — locate_event","title":"Locate Event — locate_event","text":"Locate Event","code":""},{"path":"https://dime-worldbank.github.io/ulex/reference/locate_event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate Event — locate_event","text":"","code":"locate_event(   text,   landmark_gazetteer,   landmark_gazetteer.name_var = \"name\",   landmark_gazetteer.type_var = \"type\",   roads,   roads.name_var = \"name\",   areas,   areas.name_var = \"name\",   event_words,   prepositions_list = list(c(\"at\", \"next to\", \"around\", \"just after\", \"opposite\", \"opp\",     \"apa\", \"hapa\", \"happened at\", \"just before\", \"at the\", \"outside\", \"right before\"),     c(\"near\", \"after\", \"toward\", \"along\", \"towards\", \"approach\"), c(\"past\", \"from\",     \"on\")),   junction_words = c(\"intersection\", \"junction\"),   false_positive_phrases = \"\",   type_list = NULL,   clost_dist_thresh = 500,   fuzzy_match = TRUE,   fuzzy_match.min_word_length = c(5, 11),   fuzzy_match.dist = c(1, 2),   fuzzy_match.ngram_max = 3,   fuzzy_match.first_letters_same = TRUE,   fuzzy_match.last_letters_same = TRUE,   quiet = TRUE,   mc_cores = 1 )"},{"path":"https://dime-worldbank.github.io/ulex/reference/locate_event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate Event — locate_event","text":"text Vector texts geolocated. landmark_gazetteer sf spatial data.frame representing landmarks. landmark_gazetteer.name_var Name variable indicating name landmark. landmark_gazetteer.type_var Name variable indicating type landmark. roads sf spatial data.frame representing roads. roads.name_var Name variable indicating name road. areas sf spatial data.frame representing areas, administrative areas neighborhoods. areas.name_var Name variable indicating name area. event_words Vector event words, representing events geocoded. prepositions_list List vectors prepositions. Order list determines order preposition precedence. (Default: list(c(\"\", \"next \",\"around\", \"just \", \"opposite\",\"opp\", \"apa\", \"hapa\",\"happened \", \"just \",\"\",\"outside\", \"right \"), c(\"near\", \"\", \"toward\", \"along\", \"towards\", \"approach\"), c(\"past\",\"\",\"\"))). junction_words Vector junction words check determining intersection roads. (Default: c(\"intersection\", \"junction\")). false_positive_phrases Common words found text include spurious location references (eg, githurai bus name bus, githurai also place). may common phrases checked ignored text. (Default: \"\"). type_list List vectors types. Order list determines order type precedence. (Default: NULL). clost_dist_thresh Distance (meters) considered \"close\"; example, considering whether landmark close road. (Default: 500). fuzzy_match Whether implement fuzzy matching landmarks using levenstein distance. (Default: TRUE). fuzzy_match.min_word_length Minimum word length use fuzzy matching; vector length must fuzzy_match.dist. (Default: c(5,11)). fuzzy_match.dist Allowable levenstein distances fuzzy matching; vector length must fuzzy_match.min_word_length. (Default: c(1,2)). fuzzy_match.ngram_max number n-grams extracted text calculate levensteing distance landmarks. example, text composed 5 words: w1 w2 w3 w4 fuzzy_match.ngram_max = 3, function extracts w1 w2 w3 compares levenstein distance landmarks. checks w2 w3 w4, etc. (Default: 3). fuzzy_match.first_letters_same implementing fuzzy match, first letter original found word ? (Default: TRUE). fuzzy_match.last_letters_same implementing fuzzy match, last letter original found word ? (Default: TRUE). quiet FALSE, prints text geocoded. (Default: TRUE). mc_cores > 1, uses geolocates events parallel across multiple cores relying parallel package. (Default: 1).","code":""},{"path":"https://dime-worldbank.github.io/ulex/reference/locate_event.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate Event — locate_event","text":"sf spatial dataframe geolocated events.","code":""},{"path":"https://dime-worldbank.github.io/ulex/reference/locate_event.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locate Event — locate_event","text":"","code":"library(ulex) library(sf) #> Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE  ## Landmarks landmarks_sf <- data.frame(lat = runif(3),                            lon = runif(3),                            name = c(\"restaurant\", \"bank\", \"hotel\"),                            type = c(\"poi\", \"poi\", \"poi\")) |>   st_as_sf(coords = c(\"lon\", \"lat\"),            crs = 4326)  ## Road coords <- matrix(runif(4), ncol = 2) road_sf <- coords |>   st_linestring() |>   st_sfc(crs = 4326) road_sf <- st_sf(geometry = road_sf) road_sf$name <- \"main st\"  ## Area n <- 5 coords <- matrix(runif(2 * n, min = 0, max = 10), ncol = 2) coords <- rbind(coords, coords[1,]) polygon <- st_polygon(list(coords)) area_sf <- st_sfc(polygon, crs = 4326) area_sf <- st_sf(geometry = area_sf) area_sf$name <- \"place\"  ## Locate Event event_sf <- locate_event(text = \"accident near hotel\",                          landmark_gazetteer = landmarks_sf,                          roads = road_sf,                          areas = area_sf,                          event_words = c(\"accident\", \"crash\")) #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence #> Warning: phrase is not in sentence"}]
